#!/bin/bash
# Demucs音频分离系统部署脚本
# 支持多种部署环境：Docker、Google Cloud Run、传统服务器

# 设置默认参数
ENV="production"
PLATFORM="docker"
PORT="8080"
PROJECT_ID="your-project-id"
SERVICE_NAME="demucs-api"
REGION="us-central1"

# 显示帮助信息
show_help() {
    echo "用法: ./deploy [选项]"
    echo ""
    echo "选项:"
    echo "  -h, --help              显示帮助信息"
    echo "  -e, --env ENV           设置环境（development/production），默认: production"
    echo "  -p, --platform PLATFORM 设置部署平台（docker/gcp/server），默认: docker"
    echo "  --port PORT             设置应用端口，默认: 8080"
    echo "  --project-id ID         设置GCP项目ID，默认: your-project-id"
    echo "  --service-name NAME     设置服务名称，默认: demucs-api"
    echo "  --region REGION         设置GCP区域，默认: us-central1"
    echo ""
    echo "示例:"
    echo "  ./deploy                       # 使用Docker部署（默认）"
    echo "  ./deploy -p docker             # 使用Docker部署"
    echo "  ./deploy -p gcp --project-id my-project  # 部署到Google Cloud Run"
    echo "  ./deploy -p server --port 5000 # 部署到传统服务器"
    exit 0
}

# 解析命令行参数
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -h|--help)
            show_help
            ;;
        -e|--env)
            ENV="$2"
            shift 2
            ;;
        -p|--platform)
            PLATFORM="$2"
            shift 2
            ;;
        --port)
            PORT="$2"
            shift 2
            ;;
        --project-id)
            PROJECT_ID="$2"
            shift 2
            ;;
        --service-name)
            SERVICE_NAME="$2"
            shift 2
            ;;
        --region)
            REGION="$2"
            shift 2
            ;;
        *)
            echo "未知选项: $1"
            show_help
            ;;
    esac
done

# 环境变量检查
check_env_file() {
    if [ ! -f .env ]; then
        echo "警告: .env文件不存在，将使用默认配置"
        cp .env.example .env
    fi
    
    # 根据环境更新配置
    if [ "$ENV" = "production" ]; then
        sed -i.bak 's/DEBUG=true/DEBUG=false/' .env
        sed -i.bak 's/FLASK_ENV=development/FLASK_ENV=production/' .env
        sed -i.bak "s/PORT=[0-9]*/PORT=$PORT/" .env
    fi
    
    # 清理备份文件
    if [ -f .env.bak ]; then
        rm .env.bak
    fi
}

# 部署到Docker
deploy_docker() {
    echo "==== 使用Docker部署Demucs音频分离系统 ===="
    
    # 构建Docker镜像
    echo "构建Docker镜像..."
    docker build -t demucs-api:latest .
    
    # 检查之前的容器
    CONTAINER_ID=$(docker ps -q -f name=demucs-api)
    if [ -n "$CONTAINER_ID" ]; then
        echo "停止并删除之前的容器..."
        docker stop $CONTAINER_ID
        docker rm $CONTAINER_ID
    fi
    
    # 运行新容器
    echo "启动Demucs API容器..."
    docker run -d \
        --name demucs-api \
        -p $PORT:$PORT \
        -e PORT=$PORT \
        -e FLASK_ENV=$ENV \
        --restart unless-stopped \
        demucs-api:latest
    
    echo "部署完成! 服务现在运行在 http://localhost:$PORT"
}

# 部署到Google Cloud Run
deploy_gcp() {
    echo "==== 部署Demucs音频分离系统到Google Cloud Run ===="
    
    # 检查gcloud是否安装
    if ! command -v gcloud &> /dev/null; then
        echo "错误: 未找到gcloud命令。请安装Google Cloud SDK."
        exit 1
    fi
    
    # 检查项目ID
    if [ "$PROJECT_ID" = "your-project-id" ]; then
        echo "错误: 请指定有效的GCP项目ID。使用 --project-id 选项。"
        exit 1
    fi
    
    # 构建并推送镜像到Google Container Registry
    echo "构建并推送镜像到Google Container Registry..."
    gcloud builds submit --tag gcr.io/$PROJECT_ID/$SERVICE_NAME
    
    # 部署到Cloud Run
    echo "部署到Cloud Run..."
    gcloud run deploy $SERVICE_NAME \
        --image gcr.io/$PROJECT_ID/$SERVICE_NAME \
        --platform managed \
        --region $REGION \
        --allow-unauthenticated \
        --memory 2Gi \
        --cpu 2 \
        --concurrency 10 \
        --timeout 1800 \
        --set-env-vars="FLASK_ENV=$ENV" \
        --project $PROJECT_ID
    
    echo "部署完成!"
}

# 部署到传统服务器
deploy_server() {
    echo "==== 部署Demucs音频分离系统到传统服务器 ===="
    
    # 检查虚拟环境
    if [ ! -d "venv" ]; then
        echo "创建Python虚拟环境..."
        python -m venv venv
    fi
    
    # 激活虚拟环境
    echo "激活虚拟环境并安装依赖..."
    source venv/bin/activate
    pip install --upgrade pip
    pip install -r requirements.txt
    pip install gunicorn
    
    # 检查是否已安装Supervisor
    if ! command -v supervisorctl &> /dev/null; then
        echo "警告: 未找到supervisorctl。建议安装Supervisor来管理应用进程。"
        echo "可以使用以下命令安装: sudo apt-get install supervisor"
    else
        # 创建Supervisor配置
        echo "配置Supervisor..."
        SUPERVISOR_CONF="/etc/supervisor/conf.d/demucs.conf"
        
        # 获取当前目录的绝对路径
        APP_DIR=$(pwd)
        
        # 创建Supervisor配置文件
        echo "[program:demucs]
command=$APP_DIR/venv/bin/gunicorn --bind 0.0.0.0:$PORT --workers 1 --threads 8 --timeout 0 run:app
directory=$APP_DIR
user=$(whoami)
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
environment=FLASK_ENV=\"$ENV\"
stderr_logfile=/var/log/demucs/error.log
stdout_logfile=/var/log/demucs/access.log" | sudo tee $SUPERVISOR_CONF > /dev/null
        
        # 创建日志目录
        sudo mkdir -p /var/log/demucs
        sudo chown $(whoami) /var/log/demucs
        
        # 重新加载Supervisor配置
        sudo supervisorctl reread
        sudo supervisorctl update
        sudo supervisorctl restart demucs
        
        echo "部署完成! 服务现在运行在 http://localhost:$PORT"
    fi
}

# 主函数
main() {
    # 检查环境文件
    check_env_file
    
    # 根据平台选择部署方式
    case $PLATFORM in
        docker)
            deploy_docker
            ;;
        gcp)
            deploy_gcp
            ;;
        server)
            deploy_server
            ;;
        *)
            echo "错误: 未知的部署平台 '$PLATFORM'"
            show_help
            ;;
    esac
}

# 执行主函数
main
